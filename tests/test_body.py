from __future__ import annotations

from typing import Final

import numpy as np

import pytest

from mckit.body import Body, Shape
from mckit.box import Box
from mckit.material import Material
from mckit.surface import create_surface
from mckit.transformation import Transformation
from tests import pass_through_pickle


@pytest.fixture(scope="module")
def surfaces():
    surf_data = {
        1: ("sx", [4, 2]),
        2: ("cx", [2]),
        3: ("px", [-3]),
        4: ("sx", [-3, 1]),
        5: ("px", [4]),
        6: ("sx", [4, 1]),
        7: ("cx", [3]),
        8: ("cx", [1]),
        9: ("px", [-5]),
        10: ("px", [8]),
        11: ("px", [20]),
        12: ("px", [22]),
        13: ("so", [100]),
    }
    surfs = {}
    for name, (kind, params) in surf_data.items():
        surfs[name] = create_surface(kind, *params, name=name)
    return surfs


def create_node(kind, args, surfs):
    new_args = []
    for g in args:
        if isinstance(g, tuple):
            _g = create_node(g[0], g[1], surfs)
        else:
            _g = surfs[g]
        new_args.append(_g)
    return Shape(kind, *new_args)


basic_geoms = [
    ("U", [("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]), ("C", [4])]),
    ("I", [("C", [6]), ("C", [1])]),
    ("U", [("C", [6]), ("C", [1])]),
    (
        "U",
        [
            ("I", [("C", [4]), ("C", [10])]),
            (
                "I",
                [
                    ("C", [7]),
                    ("C", [10]),
                    (
                        "U",
                        [
                            ("I", [("C", [3]), ("C", [4])]),
                            ("I", [("C", [4]), ("S", [9])]),
                            (
                                "I",
                                [
                                    ("S", [6]),
                                    ("S", [1]),
                                    ("C", [2]),
                                    ("C", [5]),
                                    ("S", [3]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    ),
    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
    (
        "I",
        [
            ("C", [2]),
            (
                "U",
                [("C", [6]), ("C", [4]), ("I", [("S", [3]), ("C", [8]), ("C", [5])])],
            ),
        ],
    ),
    ("U", [("I", [("C", [1]), ("C", [5])]), ("I", [("C", [1]), ("S", [5])])]),
    ("I", [("U", [("S", [1]), ("S", [5])]), ("U", [("S", [1]), ("C", [5])])]),
    ("I", [("C", [2]), ("S", [11]), ("C", [12])]),
    ("I", [("S", [1]), ("C", [6])]),
    ("U", [("I", [("C", [2]), ("S", [11])]), ("I", [("C", [2]), ("S", [12])])]),
    ("I", [("C", [13]), ("C", [12])]),
]


@pytest.fixture(scope="class")
def geometry(surfaces):
    return [create_node(g[0], g[1], surfaces) for g in basic_geoms]


class TestShape:
    @staticmethod
    def filter_arg(arg, surfs):
        if isinstance(arg, int):
            return surfs[arg]
        if isinstance(arg, tuple):
            return create_node(arg[0], arg[1], surfs)
        return arg

    @pytest.mark.parametrize(
        "opc, args, ans_opc, ans_args",
        [
            ("S", [1], "S", [1]),
            ("C", [1], "C", [1]),
            ("E", [], "E", []),
            ("R", [], "R", []),
            ("C", [("E", [])], "R", []),
            ("C", [("R", [])], "E", []),
            ("S", [("S", [1])], "S", [1]),
            ("S", [("I", [1, 2])], "I", [("S", [1]), ("S", [2])]),
            ("S", [("U", [1, 2])], "U", [("S", [1]), ("S", [2])]),
            ("I", [("S", [1])], "S", [1]),
            ("I", [("S", [1]), ("C", [2])], "I", [("S", [1]), ("C", [2])]),
            ("I", [1, ("C", [2])], "I", [("S", [1]), ("C", [2])]),
            ("U", [1, 2], "U", [("S", [1]), ("S", [2])]),
            ("C", [("S", [1])], "C", [1]),
            ("C", [("C", [1])], "S", [1]),
            (
                "I",
                [("I", [("S", [1]), ("C", [2])]), ("S", [3])],
                "I",
                [("S", [1]), ("C", [2]), ("S", [3])],
            ),
            (
                "U",
                [
                    ("U", [("I", [("S", [1]), ("S", [2])]), ("C", [3])]),
                    ("U", [("S", [4]), ("S", [5])]),
                    ("I", [("S", [6]), ("C", [1])]),
                ],
                "U",
                [
                    ("I", [("S", [1]), ("S", [2])]),
                    ("C", [3]),
                    ("S", [4]),
                    ("S", [5]),
                    ("I", [("S", [6]), ("C", [1])]),
                ],
            ),
            ("I", [("S", [1]), ("C", [1])], "E", []),
            ("U", [("S", [1]), ("C", [1])], "R", []),
            ("I", [("S", [1]), ("E", [])], "E", []),
            ("I", [("S", [1]), ("R", [])], "S", [1]),
            ("U", [("S", [1]), ("E", [])], "S", [1]),
            ("U", [("S", [1]), ("R", [])], "R", []),
            ("I", [("E", []), ("S", [1])], "E", []),
            ("I", [("R", []), ("S", [1])], "S", [1]),
            ("U", [("E", []), ("S", [1])], "S", [1]),
            ("U", [("R", []), ("S", [1])], "R", []),
            ("I", [("E", []), ("E", [])], "E", []),
            ("I", [("R", []), ("R", [])], "R", []),
            ("U", [("E", []), ("E", [])], "E", []),
            ("U", [("R", []), ("R", [])], "R", []),
        ],
    )
    def test_create(self, surfaces, opc, args, ans_opc, ans_args):
        args = [self.filter_arg(a, surfaces) for a in args]
        ans_args = sorted([self.filter_arg(a, surfaces) for a in ans_args], key=hash)
        shape = Shape(opc, *args)
        assert shape.opc == ans_opc
        assert shape.args == tuple(ans_args)

    @pytest.mark.parametrize(
        "opc, args",
        [
            ("E", [1]),
            ("R", [1]),
            ("S", [1, 2]),
            ("S", [("S", [1]), ("C", [2])]),
            ("C", [1, 2]),
            ("C", [("C", [1]), ("S", [2])]),
            ("I", []),
            ("U", []),
        ],
    )
    def test_create_failure(self, surfaces, opc, args):
        args = [self.filter_arg(a, surfaces) for a in args]
        with pytest.raises(ValueError, match="expected"):
            Shape(opc, *args)

    polish_cases: Final = [
        [2, "C", 3, "I", 1, "I", ("C", [5]), "I", 4, "C", "U"],
        [6, "C", 1, "C", "I"],
        [6, "C", 1, "C", "U"],
        [
            6,
            1,
            "I",
            2,
            "C",
            "I",
            5,
            "C",
            "I",
            3,
            "I",
            4,
            "C",
            9,
            "I",
            "U",
            3,
            "C",
            4,
            "C",
            "I",
            "U",
            7,
            "C",
            "I",
            10,
            "C",
            "I",
            4,
            "C",
            10,
            "C",
            "I",
            "U",
        ],
        [5, "C", 3, "I", 2, "C", "I", 1, "C", "U"],
        [3, 8, "C", "I", 5, "C", "I", 4, "C", "U", 6, "C", "U", 2, "C", "I"],
        [1, "C", 5, "C", "I", 1, "C", 5, "I", "U"],
        [1, 5, "U", 1, 5, "C", "U", "I"],
        [2, "C", 11, "I", 12, "C", "I"],
        [1, 6, "C", "I"],
        [2, "C", 11, "I", 2, "C", 12, "I", "U"],
        [13, "C", 12, "C", "I"],
    ]

    @pytest.mark.parametrize("case_no, polish", enumerate(polish_cases))
    def test_from_polish(self, geometry, surfaces, case_no, polish):
        polish = [self.filter_arg(a, surfaces) for a in polish]
        shape = Shape.from_polish_notation(polish)
        assert shape == geometry[case_no]

    @pytest.mark.parametrize(
        "case_no, expected",
        enumerate(
            [
                (
                    "I",
                    [
                        ("U", [("S", [2]), ("C", [3]), ("C", [1]), ("S", [5])]),
                        ("S", [4]),
                    ],
                ),
                ("U", [("S", [6]), ("S", [1])]),
                ("I", [("S", [6]), ("S", [1])]),
                (
                    "I",
                    [
                        ("U", [("S", [4]), ("S", [10])]),
                        (
                            "U",
                            [
                                ("S", [7]),
                                ("S", [10]),
                                (
                                    "I",
                                    [
                                        ("U", [("S", [3]), ("S", [4])]),
                                        ("U", [("S", [4]), ("C", [9])]),
                                        (
                                            "U",
                                            [
                                                ("C", [6]),
                                                ("C", [1]),
                                                ("S", [2]),
                                                ("S", [5]),
                                                ("C", [3]),
                                            ],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                ),
                ("I", [("S", [1]), ("U", [("S", [5]), ("C", [3]), ("S", [2])])]),
                (
                    "U",
                    [
                        ("S", [2]),
                        (
                            "I",
                            [
                                ("S", [6]),
                                ("S", [4]),
                                ("U", [("C", [3]), ("S", [8]), ("S", [5])]),
                            ],
                        ),
                    ],
                ),
                (
                    "I",
                    [("U", [("S", [1]), ("S", [5])]), ("U", [("S", [1]), ("C", [5])])],
                ),
                (
                    "U",
                    [("I", [("C", [1]), ("C", [5])]), ("I", [("C", [1]), ("S", [5])])],
                ),
                ("U", [("S", [2]), ("C", [11]), ("S", [12])]),
                ("U", [("C", [1]), ("S", [6])]),
                (
                    "I",
                    [
                        ("U", [("S", [2]), ("C", [11])]),
                        ("U", [("S", [2]), ("C", [12])]),
                    ],
                ),
                ("U", [("S", [13]), ("S", [12])]),
            ]
        ),
    )
    def test_complement(self, geometry, surfaces, case_no, expected):
        expected = create_node(expected[0], expected[1], surfaces)
        shape = geometry[case_no].complement()
        assert shape == expected

    @pytest.mark.parametrize(
        "no1, no2, opc, args",
        [
            (
                0,
                1,
                "I",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    ("I", [("C", [6]), ("C", [1])]),
                ],
            ),
            (
                0,
                2,
                "I",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    ("U", [("C", [6]), ("C", [1])]),
                ],
            ),
            (
                0,
                3,
                "I",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                0,
                4,
                "I",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                0,
                5,
                "I",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                1,
                0,
                "I",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    ("I", [("C", [6]), ("C", [1])]),
                ],
            ),
            (
                1,
                2,
                "I",
                [("I", [("C", [6]), ("C", [1])]), ("U", [("C", [6]), ("C", [1])])],
            ),
            (
                1,
                3,
                "I",
                [
                    ("I", [("C", [6]), ("C", [1])]),
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                1,
                4,
                "I",
                [
                    ("I", [("C", [6]), ("C", [1])]),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                1,
                5,
                "I",
                [
                    ("I", [("C", [6]), ("C", [1])]),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                2,
                0,
                "I",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    ("U", [("C", [6]), ("C", [1])]),
                ],
            ),
            (
                2,
                1,
                "I",
                [("I", [("C", [6]), ("C", [1])]), ("U", [("C", [6]), ("C", [1])])],
            ),
            (
                2,
                3,
                "I",
                [
                    ("U", [("C", [6]), ("C", [1])]),
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                2,
                4,
                "I",
                [
                    ("U", [("C", [6]), ("C", [1])]),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                2,
                5,
                "I",
                [
                    ("U", [("C", [6]), ("C", [1])]),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                3,
                0,
                "I",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                3,
                1,
                "I",
                [
                    ("I", [("C", [6]), ("C", [1])]),
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                3,
                2,
                "I",
                [
                    ("U", [("C", [6]), ("C", [1])]),
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                3,
                4,
                "I",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                3,
                5,
                "I",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                4,
                0,
                "I",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                4,
                1,
                "I",
                [
                    ("I", [("C", [6]), ("C", [1])]),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                4,
                2,
                "I",
                [
                    ("U", [("C", [6]), ("C", [1])]),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                4,
                3,
                "I",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                4,
                5,
                "I",
                [
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                5,
                0,
                "I",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                5,
                1,
                "I",
                [
                    ("I", [("C", [6]), ("C", [1])]),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                5,
                2,
                "I",
                [
                    ("U", [("C", [6]), ("C", [1])]),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                5,
                3,
                "I",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                5,
                4,
                "I",
                [
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    )
    def test_intersection(self, geometry, surfaces, no1, no2, opc, args):
        expected = create_node(opc, args, surfaces)
        result = Shape.intersection(geometry[no1], geometry[no2])
        assert result == expected

    @pytest.mark.parametrize(
        "no1, no2, opc, args",
        [
            (
                0,
                1,
                "U",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    ("I", [("C", [6]), ("C", [1])]),
                ],
            ),
            (
                0,
                2,
                "U",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    ("U", [("C", [6]), ("C", [1])]),
                ],
            ),
            (
                0,
                3,
                "U",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                0,
                4,
                "U",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                0,
                5,
                "U",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                1,
                0,
                "U",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    ("I", [("C", [6]), ("C", [1])]),
                ],
            ),
            (
                1,
                2,
                "U",
                [("I", [("C", [6]), ("C", [1])]), ("U", [("C", [6]), ("C", [1])])],
            ),
            (
                1,
                3,
                "U",
                [
                    ("I", [("C", [6]), ("C", [1])]),
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                1,
                4,
                "U",
                [
                    ("I", [("C", [6]), ("C", [1])]),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                1,
                5,
                "U",
                [
                    ("I", [("C", [6]), ("C", [1])]),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                2,
                0,
                "U",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    ("U", [("C", [6]), ("C", [1])]),
                ],
            ),
            (
                2,
                1,
                "U",
                [("I", [("C", [6]), ("C", [1])]), ("U", [("C", [6]), ("C", [1])])],
            ),
            (
                2,
                3,
                "U",
                [
                    ("U", [("C", [6]), ("C", [1])]),
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                2,
                4,
                "U",
                [
                    ("U", [("C", [6]), ("C", [1])]),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                2,
                5,
                "U",
                [
                    ("U", [("C", [6]), ("C", [1])]),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                3,
                0,
                "U",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                3,
                1,
                "U",
                [
                    ("I", [("C", [6]), ("C", [1])]),
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                3,
                2,
                "U",
                [
                    ("U", [("C", [6]), ("C", [1])]),
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                3,
                4,
                "U",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                3,
                5,
                "U",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                4,
                0,
                "U",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                4,
                1,
                "U",
                [
                    ("I", [("C", [6]), ("C", [1])]),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                4,
                2,
                "U",
                [
                    ("U", [("C", [6]), ("C", [1])]),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                4,
                3,
                "U",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                ],
            ),
            (
                4,
                5,
                "U",
                [
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                5,
                0,
                "U",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [2]), ("S", [3]), ("S", [1]), ("C", [5])]),
                            ("C", [4]),
                        ],
                    ),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                5,
                1,
                "U",
                [
                    ("I", [("C", [6]), ("C", [1])]),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                5,
                2,
                "U",
                [
                    ("U", [("C", [6]), ("C", [1])]),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                5,
                3,
                "U",
                [
                    (
                        "U",
                        [
                            ("I", [("C", [4]), ("C", [10])]),
                            (
                                "I",
                                [
                                    ("C", [7]),
                                    ("C", [10]),
                                    (
                                        "U",
                                        [
                                            ("I", [("C", [3]), ("C", [4])]),
                                            ("I", [("C", [4]), ("S", [9])]),
                                            (
                                                "I",
                                                [
                                                    ("S", [6]),
                                                    ("S", [1]),
                                                    ("C", [2]),
                                                    ("C", [5]),
                                                    ("S", [3]),
                                                ],
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
            (
                5,
                4,
                "U",
                [
                    ("U", [("C", [1]), ("I", [("C", [5]), ("S", [3]), ("C", [2])])]),
                    (
                        "I",
                        [
                            ("C", [2]),
                            (
                                "U",
                                [
                                    ("C", [6]),
                                    ("C", [4]),
                                    ("I", [("S", [3]), ("C", [8]), ("C", [5])]),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    )
    def test_union(self, geometry, surfaces, no1, no2, opc, args):
        expected = create_node(opc, args, surfaces)
        result = Shape.union(geometry[no1], geometry[no2])
        assert result == expected

    @pytest.mark.parametrize("geom_no", range(len(basic_geoms)))
    @pytest.mark.parametrize(
        "point, ans",
        [
            ([-6, 0, 0], [-1, -1, -1, -1, -1, -1, -1, +1, -1, -1, -1, +1]),
            ([-3.5, 0, 0], [+1, -1, -1, +1, -1, +1, -1, +1, -1, -1, -1, +1]),
            ([-3.5, 1.5, 0], [-1, -1, -1, -1, -1, -1, -1, +1, -1, -1, -1, +1]),
            ([-2.5, 1.5, 0], [+1, -1, -1, +1, +1, -1, -1, +1, -1, -1, -1, +1]),
            ([-1, 2.5, 0], [-1, -1, -1, -1, -1, -1, -1, +1, -1, -1, -1, +1]),
            ([1, -1.5, 0], [+1, -1, -1, +1, +1, -1, -1, +1, -1, -1, -1, +1]),
            ([1, -0.5, 0], [+1, -1, -1, +1, +1, +1, -1, +1, -1, -1, -1, +1]),
            ([2.5, 0.5, 0], [-1, -1, +1, -1, +1, +1, +1, -1, -1, -1, -1, +1]),
            ([4, -0.5, 0], [-1, +1, +1, -1, +1, +1, +1, -1, -1, -1, -1, +1]),
            ([5.5, 0.5, 0], [-1, -1, +1, -1, +1, -1, +1, -1, -1, -1, -1, +1]),
            ([7, -0.5, 0], [-1, -1, -1, -1, -1, -1, -1, +1, -1, -1, -1, +1]),
            (
                [
                    [-6, 0, 0],
                    [-3.5, 0, 0],
                    [-3.5, 1.5, 0],
                    [-2.5, 1.5, 0],
                    [-1, 2.5, 0],
                    [1, -1.5, 0],
                    [1, -0.5, 0],
                    [2.5, 0.5, 0],
                    [4, -0.5, 0],
                    [5.5, 0.5, 0],
                    [7, -0.5, 0],
                ],
                [
                    [-1, +1, -1, +1, -1, +1, +1, -1, -1, -1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, -1, +1, -1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, +1, +1, +1, -1],
                    [-1, +1, -1, +1, -1, +1, +1, -1, -1, -1, -1],
                    [-1, -1, -1, +1, -1, +1, +1, +1, +1, +1, -1],
                    [-1, +1, -1, -1, -1, -1, +1, +1, +1, -1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, +1, +1, +1, -1],
                    [+1, +1, +1, +1, +1, +1, +1, -1, -1, -1, +1],
                    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                    [+1, +1, +1, +1, +1, +1, +1, +1, +1, +1, +1],
                ],
            ),
        ],
    )
    def test_points(self, geometry, geom_no: int, point, ans):
        ans = ans[geom_no]
        result = geometry[geom_no].test_points(point)
        np.testing.assert_array_equal(result, ans)

    @pytest.mark.parametrize("case_no, expected", enumerate([5, 2, 2, 13, 4, 6, 4, 4, 3, 2]))
    def test_complexity(self, geometry, case_no, expected):
        assert geometry[case_no].complexity() == expected

    box_data: Final = [
        [[1.25, 1.75, 1.5], 2.5, 3.5, 3],
        [[-3.25, -1.5, 1.5], 2.5, 3, 3],
        [[5.5, -0.75, 0.75], 2, 1.5, 1.5],
    ]

    @pytest.fixture(scope="class")
    def box(self):
        return [Box(*b) for b in self.box_data]

    @pytest.mark.parametrize("box_no", range(len(box_data)))
    @pytest.mark.parametrize(
        "case_no, expected",
        enumerate([(0, 0, -1), (-1, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, 0), (0, 0, 0)]),
    )
    def test_box(self, geometry, box, box_no: int, case_no: int, expected: tuple[int]):
        result = geometry[case_no].test_box(box[box_no])
        assert result == expected[box_no]

    @pytest.mark.slow()
    @pytest.mark.parametrize("tol", [0.2, None])
    @pytest.mark.parametrize(
        "case_no, expected",
        enumerate(
            [
                [[-4, 4], [-2, 2], [-2, 2]],
                [[3, 5], [-1, 1], [-1, 1]],
                [[2, 6], [-2, 2], [-2, 2]],
                [[-4, 4], [-2, 2], [-2, 2]],
                [[-3, 6], [-2, 2], [-2, 2]],
                [[-4, 5], [-1, 1], [-1, 1]],
                [[2, 6], [-2, 2], [-2, 2]],
            ]
        ),
    )
    def test_bounding_box(self, geometry, tol, case_no, expected):
        base = [0, 0, 0]
        dims = [30, 30, 30]
        gb = Box(base, dims[0], dims[1], dims[2])
        if tol is not None:
            bb = geometry[case_no].bounding_box(box=gb, tol=tol)
        else:
            tol = 100.0
            bb = geometry[case_no].bounding_box()
        for j, (low, high) in enumerate(expected):
            bbd_halves_of_dimensions = 0.5 * bb.dimensions[j]
            assert bb.center[j] - bbd_halves_of_dimensions <= low
            assert bb.center[j] - bbd_halves_of_dimensions >= low - tol
            assert bb.center[j] + bbd_halves_of_dimensions >= high
            assert bb.center[j] + bbd_halves_of_dimensions <= high + tol

    @pytest.mark.slow()
    @pytest.mark.parametrize("box_no", range(len(box_data)))
    @pytest.mark.parametrize(
        "case_no, expected",
        enumerate(
            [
                [7.4940, 3.6652, 0],
                [0, 0, 0.1636],
                [0.35997, 0, 2.3544],
                [7.4940, 3.6652, 0],
                [7.8540, 3.1416, 2.3544],
                [1.9635, 1.30900, 0.1636],
            ]
        ),
    )
    def test_volume(self, geometry, box, box_no: int, case_no: int, expected):
        v = geometry[case_no].volume(box[box_no], min_volume=1.0e-4)
        assert v == pytest.approx(expected[box_no], rel=1.0e-2)

    @pytest.mark.parametrize(
        "case_no, expected",
        enumerate(
            [
                [2, 3, 1, 5, 4],
                [6, 1],
                [6, 1],
                [6, 1, 2, 5, 3, 4, 9, 7, 10],
                [5, 3, 2, 1],
                [3, 8, 5, 4, 6, 2],
                [1, 5],
                [1, 5],
                [2, 11, 12],
                [1, 6],
                [2, 11, 12],
                [13, 12],
            ]
        ),
    )
    def test_get_surface(self, geometry, surfaces, case_no, expected):
        expected = {surfaces[s] for s in expected}
        surfs = geometry[case_no].get_surfaces()
        assert surfs == expected

    @pytest.mark.parametrize("case_no, polish", enumerate(polish_cases))
    def test_pickle(self, surfaces, case_no, polish):
        polish = [self.filter_arg(a, surfaces) for a in polish]
        g = Shape.from_polish_notation(polish)
        # The idea is to generate many random points. This points have some
        # definite test results with respect to the body being tested.
        # After body saving and loading they must have absolutely the same
        # results.
        points = np.random.random((10000, 3))
        points -= np.array([0.5, 0.5, 0.5])
        points *= np.array([20, 10, 10])
        results = g.test_points(points)
        g_pic = pass_through_pickle(g)
        # fn = tmp_path / "test.pic"
        # with open(fn, "bw") as f:
        #     pickle.dump(g, f, pickle.HIGHEST_PROTOCOL)
        # with open(fn, "br") as f:
        #     g_pic = pickle.load(f)
        result_pic = g_pic.test_points(points)
        np.testing.assert_array_equal(results, result_pic)

    @pytest.mark.parametrize(
        "case_no, replace_names",
        enumerate(
            [
                [2, 3, 1, 5, 4],
                [],
                [6],
                [1, 5, 7, 10],
                [5, 3, 2],
                [3, 8, 5, 4, 6, 2],
                [1, 5],
                [5],
                [12],
                [1, 6],
                [2, 11, 12],
                [13, 12],
            ]
        ),
    )
    def test_replace_surf(self, geometry, case_no, replace_names):
        surfs = {s.name(): s for s in geometry[case_no].get_surfaces()}
        replace_dict = {}
        for name in replace_names:
            s = surfs[name]
            replace_dict[s] = s.transform(Transformation())
        new_shape = geometry[case_no].replace_surfaces(replace_dict)
        new_surfs = new_shape.get_surfaces()
        ids = {id(s) for s in new_surfs}
        ids_ans = {
            id(s) if n not in replace_names else id(replace_dict[s]) for n, s in surfs.items()
        }
        assert ids == ids_ans


class TestBody:
    kwarg_data: Final = [
        {"name": 1},
        {"name": 2, "MAT": Material(atomic=[("C-12", 1)], density=3.5)},
        {"name": 3, "U": 4},
        {"name": 4, "U": 5, "MAT": Material(atomic=[("C-12", 1)], density=2.7)},
    ]

    @pytest.mark.parametrize("case_no", range(len(basic_geoms)))
    @pytest.mark.parametrize("kwargs", kwarg_data)
    def test_create(self, geometry, case_no: int, kwargs):
        shape = geometry[case_no]
        body = Body(shape, **kwargs)
        assert body.shape == shape
        for k, v in kwargs.items():
            assert body.options[k] == v
        assert body.material() == kwargs.get("MAT", None)

    @pytest.mark.parametrize("case_no, polish", enumerate(TestShape.polish_cases))
    def test_create_polish(self, geometry, surfaces, case_no, polish):
        polish = [TestShape.filter_arg(a, surfaces) for a in polish]
        body = Body(polish)
        assert body.shape == geometry[case_no]

    @pytest.mark.parametrize("kwargs", kwarg_data)
    @pytest.mark.parametrize(
        "no1, no2",
        [(i, j) for i in range(len(basic_geoms)) for j in range(len(basic_geoms)) if i != j],
    )
    def test_intersection(self, geometry, no1, no2, kwargs):
        body1 = Body(geometry[no1], **kwargs)
        body2 = Body(geometry[no2], name="1001")
        body = body1.intersection(body2)
        assert body.shape == body1.shape.intersection(body2.shape)
        for k, v in kwargs.items():
            assert body.options[k] == v

    @pytest.mark.parametrize("kwargs", kwarg_data)
    @pytest.mark.parametrize(
        "no1, no2",
        [(i, j) for i in range(len(basic_geoms)) for j in range(len(basic_geoms)) if i != j],
    )
    def test_union(self, geometry, no1, no2, kwargs):
        body1 = Body(geometry[no1], **kwargs)
        body2 = Body(geometry[no2], name="1001")
        body = body1.union(body2)
        assert body.shape == body1.shape.union(body2.shape)
        for k, v in kwargs.items():
            assert body.options[k] == v

    @pytest.mark.slow()
    @pytest.mark.parametrize("kwarg", kwarg_data)
    @pytest.mark.parametrize(
        "case_no, expected",
        [
            (0, [2, "C", 3, "I", 1, "I", 5, "C", "I", 4, "C", "U"]),
            (1, [6, "C"]),
            (2, [1, "C"]),
            (3, [2, "C", 3, "I", 1, "I", 5, "C", "I", 4, "C", "U"]),
            (4, [5, "C", 3, "I", 2, "C", "I", 1, "C", "U"]),
            (5, [3, 8, "C", "I", 5, "C", "I", 4, "C", "U", 6, "C", "U"]),
            pytest.param(
                6,
                [4, "C"],
                marks=pytest.mark.xfail(reason="need full simplification approach"),
            ),
            pytest.param(
                7,
                [4],
                marks=pytest.mark.xfail(reason="need full simplification approach"),
            ),
            (8, [Shape("E")]),
            (9, [Shape("E")]),
            (10, [Shape("E")]),
            (11, [Shape("R")]),
        ],
    )
    def test_simplify(self, geometry, surfaces, case_no: int, expected, kwarg):
        expected = [TestShape.filter_arg(a, surfaces) for a in expected]
        expected_shape = Shape.from_polish_notation(expected)
        body = Body(geometry[case_no], **kwarg)
        gb = Box([3, 0, 0], 26, 20, 20)
        simple_body = body.simplify(min_volume=0.001, box=gb)
        assert simple_body.shape == expected_shape
        for k, v in kwarg.items():
            assert simple_body.options[k] == v
        assert simple_body.material() == kwarg.get(
            "MAT", None
        ), "Material value should be preserved on simplification"

    split_surfaces: Final = {
        1: create_surface("SX", 4, 2, name=1),
        2: create_surface("SX", -1, 2, name=2),
        3: create_surface("SX", 5, 2, name=3),
        4: create_surface("SX", 2, 1, name=4),
        5: create_surface("SX", 2, 10, name=5),
        6: create_surface("PX", -2, name=6),
        7: create_surface("PX", 1, name=7),
        8: create_surface("PX", 1.2, name=8),
        9: create_surface("PX", 3, name=9),
        10: create_surface("CX", 10, name=10),
        11: create_surface("CX", 1, name=11),
    }

    @pytest.mark.slow()
    @pytest.mark.parametrize("kwarg", kwarg_data)
    @pytest.mark.parametrize(
        "case_no, geometry, ans_geometry",
        [
            (0, [1, "C", 2, "C", "U"], [[1, "C"], [2, "C"]]),
            (1, [1, "C", 3, "C", "U"], [[1, "C", 3, "C", "U"]]),
            (2, [1, "C"], [[1, "C"]]),
            (
                3,
                [1, "C", 2, "C", "U", 4, "C", "I"],
                [[1, "C", 4, "C", "I"], [2, "C", 4, "C", "I"]],
            ),
            (
                4,
                [1, "C", 2, "C", "U", 5, "C", "I"],
                [[1, "C", 5, "C", "I"], [2, "C", 5, "C", "I"]],
            ),
            (5, [4, "C", 5, "U"], [[4, "C"], [5]]),
            (
                6,
                [6, 7, "C", "I", 10, "C", "I", 8, 9, "C", "I", 11, "C", "I", "U"],
                [[6, 7, "C", "I", 10, "C", "I"], [8, 9, "C", "I", 11, "C", "I"]],
            ),
            (
                7,
                [6, 8, "C", "I", 10, "C", "I", 8, 9, "C", "I", 11, "C", "I", "U"],
                [[6, 8, "C", "I", 10, "C", "I"], [8, 9, "C", "I", 11, "C", "I"]],
            ),
            (
                8,
                [6, 8, "C", "I", 10, "C", "I", 7, 9, "C", "I", 11, "C", "I", "U"],
                [[6, 8, "C", "I", 10, "C", "I", 7, 9, "C", "I", 11, "C", "I", "U"]],
            ),
        ],
    )
    def test_split(self, case_no, geometry, ans_geometry, kwarg):
        origin_shape = Shape.from_polish_notation(
            [TestShape.filter_arg(a, self.split_surfaces) for a in geometry]
        )
        body = Body(origin_shape, **kwarg)
        expected = set()
        for ans in ans_geometry:
            expected.add(
                Shape.from_polish_notation(
                    [TestShape.filter_arg(a, self.split_surfaces) for a in ans]
                )
            )
        gb = Box([0, 0, 0], 100, 100, 100)
        split_bodies = body.split(min_volume=0.001, box=gb)
        body.shape.get_stat_table()
        assert len(split_bodies) == len(expected)
        split_shapes = {b.shape for b in split_bodies}
        assert split_shapes == expected
        for b in split_bodies:
            for k, v in kwarg.items():
                assert b.options[k] == v
            assert b.material() == kwarg.get("MAT", None)

    @pytest.mark.parametrize(
        "fill_tr",
        [
            None,
            Transformation(translation=[2, -1, -0.5]),
            Transformation(translation=[1, 2, 3]),
            Transformation(translation=[-4, 2, -3]),
            Transformation(
                translation=[3, 0, 9],
                rotation=[30, 60, 90, 120, 30, 90, 90, 90, 0],
                indegrees=True,
            ),
            Transformation(
                translation=[1, 4, -2],
                rotation=[0, 90, 90, 90, 30, 60, 90, 120, 30],
                indegrees=True,
            ),
            Transformation(
                translation=[-2, 5, 3],
                rotation=[30, 90, 60, 90, 0, 90, 120, 90, 30],
                indegrees=True,
            ),
        ],
    )
    @pytest.mark.parametrize(
        "tr",
        [
            Transformation(translation=[-3, 2, 0.5]),
            Transformation(translation=[1, 2, 3]),
            Transformation(translation=[-4, 2, -3]),
            Transformation(
                translation=[3, 0, 9],
                rotation=[30, 60, 90, 120, 30, 90, 90, 90, 0],
                indegrees=True,
            ),
            Transformation(
                translation=[1, 4, -2],
                rotation=[0, 90, 90, 90, 30, 60, 90, 120, 30],
                indegrees=True,
            ),
            Transformation(
                translation=[-2, 5, 3],
                rotation=[30, 90, 60, 90, 0, 90, 120, 90, 30],
                indegrees=True,
            ),
        ],
    )
    @pytest.mark.parametrize("case_no", range(len(basic_geoms)))
    def test_transform(self, geometry, tr, case_no: int, fill_tr):
        # The idea is to generate many random points. This points have some
        # definite test results with respect to the body being tested.
        # After transformation they must have absolutely the same results.
        points = np.random.random((10000, 3))
        points -= np.array([0.5, 0.5, 0.5])
        points *= np.array([20, 10, 10])

        if fill_tr is not None:
            fill = {"transform": fill_tr}
            points1 = fill_tr.apply2point(points)
        else:
            fill = None
            points1 = points
        body = Body(geometry[case_no], FILL=fill)
        results = body.shape.test_points(points1)

        new_body = body.transform(tr)
        if fill_tr:
            points2 = new_body.options["FILL"]["transform"].apply2point(points)
        else:
            points2 = tr.apply2point(points)
        new_results = new_body.shape.test_points(points2)
        # TODO: Check testing of FILL without 'transform' case
        np.testing.assert_array_equal(results, new_results)
